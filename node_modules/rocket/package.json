{
  "name": "rocket",
  "description": "The rapid development framework for node.js",
  "keywords": [
    "mvc",
    "model view controller",
    "comet",
    "rapid development",
    "Rocket",
    "framework"
  ],
  "version": "0.5.8",
  "homepage": "http://wavo.me",
  "repository": {
    "type": "git",
    "url": "git://github.com/glesperance/node-rocket.git"
  },
  "author": {
    "name": "Gabriel Lesperance",
    "email": "gabriel@wavo.me",
    "url": "glesperance.com / wavo.me"
  },
  "main": "rocket",
  "bin": {
    "rocket": "./bin/rocket.js"
  },
  "engines": {
    "node": ">= 0.4.10"
  },
  "dependencies": {
    "express": "2.5.x",
    "express-resource": "0.2.x",
    "nopt": "2.0.x",
    "jade": "0.26.x",
    "lingo": "0.0.x",
    "async": "0.1.x",
    "async-fs": "0.0.x",
    "underscore": "1.3.x",
    "rimraf": "2.0.x",
    "oo": "0.0.x",
    "jade-i18n": "= 0.0.2",
    "now": "0.8.x",
    "colors": "0.6.x",
    "requirejs": "2.1.x",
    "wrench": "1.3.x"
  },
  "devDependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/glesperance/node-rocket/raw/master/LICENSE"
    }
  ],
  "readme": "# Rocket (node-rocket)\n##The rapid development framework for node.js web applications\n\n<img src=\"https://github.com/glesperance/node-rocket/raw/master/lib/logo.png\" width=\"200\" alt=\"Node Rocket Rocks!\" />\n\nRocketJS.net a.k.a. node-Rocket is a project created by Gabriel Lespérance during the “Startupfier Summer Kick-off: Hackathon” in order to allow rapid development of real-time web applications using node.js.\n\nHighly inspired by Ruby on Rails and cakePHP, Rocket puts forward the convention over configuration principle in order to simplify and speedup the software development process and allow easier scalability by leveraging node.js asynchronous behavior as well as its javascript nature. \n\nCentral to RocketJS is the principle of having a single point of contact between the programmer and the underlying application and resources. Hence, RocketJS aims to blur and reduce as much as possible the separation between the client (browser) and the server (node.js) while maximizing the scaling potential (for instance by allowing code sharing between the server and the client) and improving the performance of the resulting web application.  \n\nBuilt on top of express -- node.js’ high performance web development framework -- RocketJS provides a robust structure on which to build your web applications without sacrificing any of your freedom.\n\n### RocketJS Features\n* Automatic routing of your controllers\n* Automatic mapping of your views to their corresponding controller\n* Easy web-socket / comet application support through dnode\n* Easy server / client code sharing allowing the client to  use RequireJS  `require()` command to import/use server JS libraries\n* High focus on RESTful controller conventions\n* Client-side support for jade template\n* Automagic optimization of client javascript modules and CSS files\n* Easy i18n localization\n* Automatic reloading of modules when a modification is detected allowing easy and fast development.  \n* View rendering and partials support\n* Connect middleware support\n* Built on top of express\n\n## Installation\n\n    $ npm install rocket\n    \n## Initializing Your Project\n\n    rocket -I MyRocketProject; cd MyRocketProject; npm update\n\n## Launching Your Project\n\nWhile in your project's directory simply do :\n\n\tnode launcher.js\n\t\n## Directory Structure of a Rocket Project\n\n    ./\n    |\n    |-- client\n    |    # Contains all the files used by the client, including CSS, Javascript libraries and \n    |    # static files.\n    |\n    |-- controllers\n    |    # Contains your application's controllers.\n    |     \n    |-- exports\n    |    # Contains your application's modules that will be exported to the client. \n    |\n    |-- libs\n    |    # Contains all your (other) application's libraries.\n    |\n    |-- locales\n    |    # Contains all your localization files.\n    |\n    |-- models\n    |    # Contains all your applications's models.\n    |\n    |-- views\n    |    # Contains your applications's main layout, template files and associated\n    |    # partials.\n    |\n    |- launcher.js\n\n## Client\n### Structure of the Client directory\n\n    ./client/\n    |\n    |-- css\n    |    # Contains all the CSS files that are exported to the client.\n    |\n    |-- js\n    |    # Contains all the javascript files that are exported (through requireJS)\n    |    # to the client. All these files can then be accessed via `require()`\n    |    \n    |-- static\n         # Contains all your static files.\n\n### Allow the browser to require() your javascript modules with ./client/js/\n\n#### Structure of the `client/js` directory\n\n    ./client/js/\n    |\n    |-- libs\n    |    # Contains all your client side libraries used by your client modules. \n    |\n    |-- vendors\n    |    # Contains all 3rd party libraries used by your application.\n    |\n    |-- templates\n    |    # Contains all your client jade partial files\n    |\n    |- require.config.json\n         # This file contains all your custom requireJS modules paths\n         # configuration. This is extremely handy to make sure you always use\n         # the latest CDN version of a public module.\n    \n\nEach files/folders located under the `./client/libs/` directory of your project \nare made available to the client's browser by **Rocket** via the `require()` command.\nThe modules are referenced by their relative path from the `./client/js/` \nfolder.\n\ne.g. To require a module located at ./clients/js/a.js from the browser:\n\n    require(['./a'], function(a) { /* ... */ });\n    \nThe modules can also be located further down the `./client/js` directory tree.\nHence you can require the file located at `./client/js/nested/dirs/b.js` by \ndoing :\n    \n    //NB do **NOT** put the `.js` after the filename !!\n    require(['./client/libs/nested/dirs/b'], function(b) { /* ... */ });\n\nUsual _RequireJS_ conventions apply to the modules.  \n\n#### Using jade templates in the browser\n\nIn view of reducing the friction between the programmer and its environment\nto a minimum, rocket allows the use of jade templates on the client side.\n\nTo do so, simply put all you jade partials files in the `client/js/templates`\ndirectory and let rocket compile, and bundle those for you to use in the browser.\n\nTo use your template, simply require it and use it !\n\ne.g. To use the template located at `client/js/templates/dialog.jade` you do :\n \n    require(['jade-runtime', 'templates/dialog.jade'], function(__, dialog) {\n    \n      var html  = dialog({ title: 'Hello World !', message: 'This works!!' })\n        ;\n        \n      /* now use your compiled template ! */\n     \n    );\n\n#### Requiring javascript files from a CDN via require.config.json\n\nIn order to speedup page loads and to further comply to DRYness principles, \nrocket allows you to use CDN modules as if they were local, making sure you can\nstill benefit from all the requireJS optimizations.\n\nTo do so you simply need to list those modules in your require.config.json file\nlocated at the root of your `client/js` directory.\n\nE.g. to use the google's CDN jquery, jquery-ui and cdnJS's version of underscore,\nyou'd need the following definitions in your require.config.json file :\n\n    {\n        \"paths\" : {\n            \"jquery\"      : \"//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min\"\n          , \"jqueryui\"    : \"//ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min\"\n          , \"underscore\"  : \"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.1.7/underscore-min\"\n        }\n    }\n\nNote that we omitted '.js' extension for the modules...\n\n#### Production mode & Optimizations\n\nTo further optimize browser load times, you can start rocket in production mode\nby defining the following environment variable at start:\n\n     NODE_ENV='production'\n     \nWhen in production mode, rocket (1) bundles all your javascript client files at \nthe root of your `client/js` directory with their dependencies, and then uglifies\nthem.\n\nThus, when those are used on the browser, only one request is needed to fetch them.\n\nRocket also (2) bundles your CSS files by resolving their @import statement.\nThe resulting CSS files are also minified.\n\nNote that since your client jade template are compiled before being sent to the\nbrowser, they are optimized too !\n\nAll those optimizations are provided by RequireJS r.js utility.\n\n### Serving static files via ./client/static\n\nAll files located under the `./client/static/` directory are statically served\nby **Rocket** under the `http://example.com/static/` URL.\n\nPutting forth the use of conventions common to all **Rocket** projects, every \nproject is initially created with the following files/dirs in `./client/static/`:\n\n    ./client/static/\n    |\n    |-- font\n    |\n    |-- img\n    |\n    |-- apple-touch-icon.png\n    |\n    |-- favicon.ico\n\n\n## Controllers\n\nBy using a modified version of the powerful [express-resource](https://github.com/visionmedia/express-resource \"Express Resource - GitHub\") plugin, **Rocket** provides\nyou with a robust way of automatically mapping your _controllers_ to your _routes_.\n\nEach time you launch your application, **Rocket** takes all the `./controllers/[controller_name]_controller.js`\nmodules, and maps their exported functions as follows :\n\n    GET     /[controller_name]              ->  index\n    GET     /[controller_name]/new          ->  new\n    POST    /[controller_name]              ->  create\n    GET     /[controller_name]/:forum       ->  show\n    GET     /[controller_name]/:forum/edit  ->  edit\n    PUT     /[controller_name]/:forum       ->  update\n    DELETE  /[controller_name]/:forum       ->  destroy\n\ne.g.: \n\n    GET     /forums              ->  require('./controllers/forums_controller').index\n    GET     /forums/new          ->  require('./controllers/forums_controller').new\n    POST    /forums              ->  require('./controllers/forums_controller').create\n    GET     /forums/:forum       ->  require('./controllers/forums_controller').show\n    GET     /forums/:forum/edit  ->  require('./controllers/forums_controller').edit\n    PUT     /forums/:forum       ->  require('./controllers/forums_controller').update\n    DELETE  /forums/:forum       ->  require('./controllers/forums_controller').destroy\n    \nWhere **{index, new, create, show, edit, update, destroy}** are normal _express_\ncallbacks functions :\n\n    function(req,res) { /* ... */ }\n    \nIt is important to note that\n\n    ./controllers/root_controller.js\n\nis used as the `/` controller.\n\nFor more info see the [express-resource readme](https://github.com/visionmedia/express-resource \"Express Resource - GitHub\").\n\n### Conventions on controller names\n\nController names must :\n\n* be plural\n* be all lower case\n* be underscored\n* have a *_controller* suffix\n\nHence, \n\n* `./controller/hyper_beams_controller.js`\n    \nis valid whereas\n\n* `./controller/hyper_beams.js` \n* and  `./controller/hyper_beam_controller.js`\n\nare not.\n\n### Defining custom actions for your controllers\n\nIn cases where you might need to derive from the RESTful conventions, **Rocket**\nprovides to  you a way to add custom actions to your controllers by mapping any\nexported function but {index, new, create, show, edit, update, destroy} as follows:\n\n    {GET, POST, PUT, DELETE}  /[controller_name]/myAction  --------------->  myAction\n\nYou can also be more specific in your mapping by making `myAction` an object:\n    \n    GET     /[controller_name]/myAction/ --------------------------------->  myAction.get\n            /[controller_name]/myAction/:[singular_controller_name] ------>  myAction.get\n    \n    POST    /[controller_name]/myAction/ --------------------------------->  myAction.post\n            /[controller_name]/myAction/:[singular_controller_name] ------>  myAction.post\n    \n    PUT     /[controller_name]/myAction/ --------------------------------->  myAction.put\n            /[controller_name]/myAction/:[singular_controller_name] ------>  myAction.put\n            \n    DELETE  /[controller_name]/myAction/ --------------------------------->  myAction.destroy\n            /[controller_name]/myAction/:[singular_controller_name] ------>  myAction.destroy\n\n### Exporting functions of a controller without mapping them to a route\n\nBy default *Rocket* ignores all exported functions prefixed with an underscore `_`.\n\nThis can be used for example if you want to be able to `require()` and extend a\n*base* controller from which you want to inherit some property or methods.\n\n### Auto-loading resource for your controller\n\nIt is possible -- via express-resource -- to *auto-load* the data associated with\na specific `id` for your controller to use.\n\nSimply put, this can be done by exporting the function in question as`_load` in \nthe controller module.\n\nAuto-loading functions take the following form:\n\n    exports._load = function(id, cb) {\n      var err\n        , obj\n        ;\n        \n      //(1) -- load the object with the specified id\n      \n      //(2) -- call the callback\n      cb(err, obj);\n    }\n\nFor more info see [express-resource readme](https://github.com/visionmedia/express-resource \"Express Resource - GitHub\").\n\n## Now.js exports\n\nBy using [nowjs](http://nowjs.com/), rocket \nallows you to export server objects and make them accessible to the client.\n\nTo export a module, simply create a javascript file in your `exports` directory\nand rocket will automagically, export it for you.\n\ne.g.\n\nThe `exports/chat.js` file :\n\n    exports.sendMsg = function(msg) { /*...*/ } \n    \nwill be accessible through nowjs in the client by doing :\n\n    require(['now'], function(dnode) {\n      now.ready(function() {\n\t    now.chat.sendMsg('Hello world!');\n\t  });\n    });\n\n## Models\n\nStarting with version 0.1.x, rocket is database agnostic. If you're looking \nforward to using a noSQL DB, we recommend you to use [mongoDB](http://www.mongodb.org/) in \nconjunction with [mongoose](http://http://mongoosejs.com/).\n\n## Locales\n\nEssential to any production application is the need to have localization support.\n\nAs with controllers and views, rocket puts forward conventions that will allow\nyou to better manage your projects, making sure everything is at its right place.\n\nTo do so, rocket leverage the jade-i18n library by taking each javascript \npackages it finds in the `./locales` directory and then define the phrases it contains.\n\nFor example, to define the phrase *WELCOME_MESSAGE* in *en_CA* you simply create\na file named **en_CA.js** (in the `./locales` directory) containing the following:\n\n    module.exports = {\n        WELCOME_MESSAGE : 'Hello world !'\n      , GOODBYE_MESSAGE : 'Bye world !'\n    }\n    \n### Using locales in my **controllers**\n\nOne of the *suggested* pattern to better leverage jade-i18n in your controllers\nis to use a middleware in order to (1) Detect the language of the client and (2)\nprovide a version of `rocket._` (jade-i18n `_` helper) with a pre-appended \n`lang` argument in order to allow your controllers to simply call `req._` to\ntranslate messages in the client's language.\n\nSuch middleware would look like :\n\n    function(req, res, next) {\n      \n      var current_lang = guessLang(req)\n        ;\n      \n      req._ = function(text) {   \n        return rocket._(current_lang, text);\n      }\n      \n      next();\n      \n    }\n\n### Using locales in my **views**\n\nYou can use the `_` dynamic helper just like you would with jade-i18n. \n\n### Using locales anywhere (else)\n\nThe jade-i18n package is available through `rocket.i18n` and its `_` dynamic\nhelper is available through `rocket._`\n\n## Views\n\nRocket takes care of matching your views to your controllers so you do not have\nto define these redundant relationship.\n\nControllers without view simply returns the JSON passed to `res.send()`.\n\n### Controller/Views mapping\n\nRocket maps controllers to their views in the following way :\n\n    ./controllers/root_controller.js\n        |\n        |- exports.index  = function(req,res) { /* ... */ } --> views/root/root.index.jade\n        |\n        |- exports.custom = {\n               get  : function(req, res) { /* ... */ } --> views/root/root.custom.get.jade\n             , post : function(req, req) { /* ... */ } --> views/root/root.custom.post.jade\n           }\n\n### Bypassing view generation with XHR queries\n\nIn order to serve as RESTful access points, every controller returns JSON\ninstead of its rendered view, when it is queried via XHR (ajax).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/glesperance/node-rocket/issues"
  },
  "_id": "rocket@0.5.8",
  "dist": {
    "shasum": "8f6ac75d54291067c567ff5eeb3feec24effc296"
  },
  "_from": "rocket@",
  "_resolved": "https://registry.npmjs.org/rocket/-/rocket-0.5.8.tgz"
}
